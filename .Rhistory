p <- visit_one %>% ggplot(aes(x = LOI, y = IMAT)) +
geom_violin() +
#  labs(x = i) +
geom_text(stat='count', aes(x=LOI)) +
g.theme
p <- visit_one %>% ggplot(aes(x = LOI, y = IMAT)) +
geom_violin() +
#  labs(x = i) +
geom_text(stat='count', aes(x=LOI)) +
g.theme
print(p)
p <- visit_one %>% ggplot(aes(x = LOI)) +
geom_violin(aes(y = IMAT)) +
#  labs(x = i) +
geom_text(stat='count') +
g.theme
print(p)
p <- visit_one %>% ggplot(aes(x = LOI)) +
geom_violin(aes(y = IMAT)) +
#  labs(x = i) +
geom_text(stat='count', aes(label=..count..), vjust=-1) +
g.theme
print(p)
g.theme <- theme_stata()
p <- visit_one %>% ggplot(aes(x = LOI)) +
geom_violin(aes(y = IMAT)) +
#  labs(x = i) +
geom_text(stat='count', aes(label=..count..), vjust=-1) +
g.theme
print(p)
p <- visit_one %>% ggplot(aes(x = LOI)) +
geom_violin(aes(y = IMAT)) +
#  labs(x = i) +
geom_text(stat='count', aes(label=..count..)) +
g.theme
print(p)
p <- visit_one %>% ggplot(aes(x = ASIA)) +
geom_violin(aes(y = IMAT)) +
geom_text(stat='count', aes(label=..count..)) +
g.theme
print(p)
p <- visit_one %>% ggplot(aes(x = PRAH)) +
geom_violin(aes(y = IMAT)) +
geom_text(stat='count', aes(label=..count..)) +
g.theme
print(p)
p <- visit_one %>% ggplot(aes(x = GEND)) +
geom_violin(aes(y = IMAT)) +
geom_text(stat='count', aes(label=..count..)) +
g.theme
print(p)
p <- visit_one %>% ggplot(aes(x = BOI)) +
geom_violin(aes(y = IMAT)) +
geom_text(stat='count', aes(label=..count..)) +
g.theme
print(p)
p <- visit_one %>% ggplot(aes(x = BLI)) +
geom_violin(aes(y = IMAT)) +
geom_text(stat='count', aes(label=..count..)) +
g.theme
print(p)
count(unique(all_at_once$SUBJ))
unique(all_at_once$SUBJ))
unique(all_at_once$SUBJ)
length(unique(all_at_once$SUBJ))
# Pick only visit 1
visit_one <- all_at_once[, -46:-56] %>%
dplyr::filter(VINO == 1) %>%
dplyr::select(-SUBJ, -VINO) %>%
dplyr::filter(ALBM < 999)
# NOTE: 1 ALBUMIN VALUE IS AT 999, NEED TO UNDERSTAND THAT
categoricals <- visit_one %>% dplyr::select(is.factor | IMAT)
numericals <- visit_one %>% dplyr::select(is.numeric)
p <- visit_one %>% ggplot(aes(x = PRI)) +
geom_violin(aes(y = IMAT)) +
geom_text(stat='count', aes(label=..count..)) +
g.theme
print(p)
p <- visit_one %>% ggplot(aes(x = LOI)) +
geom_violin(aes(y = IMAT)) +
geom_text(stat='count', aes(label=..count..)) +
g.theme
print(p)
p <- visit_one %>% ggplot(aes(x = ASIA)) +
geom_violin(aes(y = IMAT)) +
geom_text(stat='count', aes(label=..count..)) +
g.theme
print(p)
p <- visit_one %>% ggplot(aes(x = GEND)) +
geom_violin(aes(y = IMAT)) +
geom_text(stat='count', aes(label=..count..)) +
g.theme
print(p)
p <- visit_one %>% ggplot(aes(x = BOI)) +
geom_violin(aes(y = IMAT)) +
geom_text(stat='count', aes(label=..count..)) +
g.theme
print(p)
p <- visit_one %>% ggplot(aes(x = BLI)) +
geom_violin(aes(y = IMAT)) +
geom_text(stat='count', aes(label=..count..)) +
g.theme
print(p)
# Pick only visit 1
visit_one <- all_at_once[, -46:-56] %>%
dplyr::filter(VINO == 1) %>%
dplyr::select(-SUBJ, -VINO) %>%
dplyr::filter(ALBM < 999)
# NOTE: 1 ALBUMIN VALUE IS AT 999, NEED TO UNDERSTAND THAT
categoricals <- visit_one %>% dplyr::select(is.factor | IMAT)
numericals <- visit_one %>% dplyr::select(is.numeric)
p <- visit_one %>% ggplot(aes(x = PRI)) +
geom_violin(aes(y = IMAT)) +
geom_text(stat='count', aes(label=..count..)) +
g.theme
print(p)
p <- visit_one %>% ggplot(aes(x = LOI)) +
geom_violin(aes(y = IMAT)) +
geom_text(stat='count', aes(label=..count..)) +
g.theme
print(p)
p <- visit_one %>% ggplot(aes(x = ASIA)) +
geom_violin(aes(y = IMAT)) +
geom_text(stat='count', aes(label=..count..)) +
g.theme
print(p)
p <- visit_one %>% ggplot(aes(x = GEND)) +
geom_violin(aes(y = IMAT)) +
geom_text(stat='count', aes(label=..count..)) +
g.theme
print(p)
p <- visit_one %>% ggplot(aes(x = BOI)) +
geom_violin(aes(y = IMAT)) +
geom_text(stat='count', aes(label=..count..)) +
g.theme
print(p)
p <- visit_one %>% ggplot(aes(x = BLI)) +
geom_violin(aes(y = IMAT)) +
geom_text(stat='count', aes(label=..count..)) +
g.theme
print(p)
print("Summary")
summary(visit_one)
print("Partial Correlations")
Sigma <- cor(na.omit(numericals))
Sigma.inv <- solve(Sigma)
Omega <- -cov2cor(Sigma.inv)
diag(Omega) <- 1
Omega
corrplot::corrplot(Omega)
print("Standardized Distances Check")
scaled_numericals <- scale(numericals)
numericals.scaled_dist <- pdist(scaled_numericals, "euclidean")
boxplot(as.vector(numericals.scaled_dist))
mean(scaled_numericals)
mean(na.omit(scaled_numericals))
?sd
sd(na.omit(scaled_numericals))
print("Standardized Distances Check")
scaled_numericals <- scale(numericals)
numericals.scaled_dist <- pdist(na.omit(scaled_numericals), "euclidean")
boxplot(as.vector(numericals.scaled_dist))
?cmdscale
print("Partial Correlations")
Sigma <- cor(na.omit(numericals))
Sigma.inv <- solve(Sigma)
Omega <- -cov2cor(Sigma.inv)
diag(Omega) <- 1
Omega
# Make histograms for numerical data
for (i in colnames(numericals)) {
p <- visit_one %>% ggplot(aes_string(x = i)) +
geom_histogram(bins = 30) +
labs(x = i) +
g.theme
print(p)
}
# Make violins for PRI against numericals
for (i in colnames(numericals)) {
p <- visit_one %>% ggplot(aes_string(x = "PRI")) +
geom_violin(aes_string(y = i)) +
geom_text(stat='count', aes(label=..count..)) +
labs(y = i) +
g.theme
print(p)
}
pairs(numericals, panel = panel.smooth, lwd = 2, cex = 1.5, col = 4)
numericals %>% dplyr::select(-HGA1, -ALBM, -WT, -HT, -HRSC) %>% pairs(panel = panel.smooth, lwd = 2, cex = 1.5, col = 4)
summary(categoricals)
summary(numericals)
box(numericals$AGEN)
boxplot(numericals$AGEN)
boxplot(numericals$IMAT)
#print("Standardized Distances Check")
#scaled_numericals <- scale(numericals)
#numericals.scaled_dist <- pdist(na.omit(scaled_numericals), "euclidean")
#boxplot(as.vector(numericals.scaled_dist))
print("Standardized Distances Check")
scaled_numericals <- scale(numericals)
numericals.scaled_dist <- pdist(na.omit(scaled_numericals), "euclidean")
boxplot(as.vector(numericals.scaled_dist))
names(categoricals)
table(categoricals$race, categoricals$ASIA)
table(categoricals$RACE, categoricals$ASIA)
table(categoricals$PRI, categoricals$RACE)
table(categoricals$PRI, categoricals$LOI)
prop.table(categoricals$PRI, categoricals$LOI)*100
prop.table(categoricals$PRI, categoricals$LOI)
table(categoricals$PRI, categoricals$LOI)
p <- visit_one %>% ggplot(aes_string(x = "ASIA")) +
geom_count(aes_string(y = "PRI")) +
geom_text(stat='count', aes(label=..count..)) +
#  labs(x = i) +
g.theme
print(p)
p <- visit_one %>% ggplot(aes_string(x = "ASIA", y = "PRI")) +
geom_count() +
geom_text(stat='count', aes(label=..count..)) +
labs(x = i) +
g.theme
print(p)
table(categoricals$LOI, categoricals$PRI)
table(categoricals$ASIA, categoricals$PRI)
table(categoricals$CUTP, categoricals$PRI)
table(categoricals$LOI, categoricals$PRI)
table(categoricals$ASIA, categoricals$PRI)
table(categoricals$CUTP, categoricals$PRI)
table(categoricals$BED, categoricals$PRI)
p <- visit_one %>% ggplot(aes(x = LOI, y = PRI)) +
geom_count() +
g.theme
print(p)
table(categoricals$LOI, categoricals$PRI)
p <- visit_one %>% ggplot(aes(x = ASIA, y = PRI)) +
geom_count() +
g.theme
print(p)
table(categoricals$ASIA, categoricals$PRI)
p <- visit_one %>% ggplot(aes(x = CUTP, y = PRI)) +
geom_count() +
g.theme
print(p)
table(categoricals$CUTP, categoricals$PRI)
p <- visit_one %>% ggplot(aes(x = BED, y = PRI)) +
geom_count() +
g.theme
print(p)
table(categoricals$BED, categoricals$PRI)
log(3)
print("Guesses from EDA")
linear.a <- lm(log(IMAT/(100-IMAT)) ~ YRIN + AGEN + HGA1 + ETHN + LOI + ASIA + PRI + BED + PRAH, data = visit_one)
summary(linear.a)
print("Guesses from EDA")
linear.a <- lm(log(IMAT/(100-IMAT)) ~ YRIN + AGEN + HGA1 + ETHN + LOI + ASIA + PRI + BED + PRAH, data = visit_one)
summary(linear.a)
print("Guesses from EDA")
linear.b <- lm(log(IMAT/(100-IMAT)) ~ log(YRIN) + log(AGEN) + log(HGA1) + ETHN + LOI + ASIA + PRI + BED + PRAH, data = visit_one)
summary(linear.b)
# Just some stuff that looked good in the EDA
#ln(y/(1-y))
print("Guesses from EDA")
linear.a <- lm(log(IMAT/(100-IMAT)) ~ YRIN + AGEN + HGA1 + LOI + ASIA + PRI + BED + PRAH, data = visit_one)
summary(linear.a)
print("Guesses from EDA")
linear.b <- lm(log(IMAT/(100-IMAT)) ~ log(YRIN) + log(AGEN) + log(HGA1) + LOI + ASIA + PRI + BED + PRAH, data = visit_one)
summary(linear.b)
print("Refining a bit")
# Taking out BED
linear.c <- lm(log(IMAT) ~ log(YRIN) + log(AGEN) + LOI + ASIA + PRI, data = visit_one)
summary(linear.c)
# Just some stuff that looked good in the EDA
#ln(y/(1-y))
print("Guesses from EDA")
linear.a <- lm(log(IMAT/(100-IMAT)) ~ YRIN + AGEN + HGA1 + LOI + ASIA + PRI + BED + PRAH, data = visit_one)
summary(linear.a)
print("Guesses from EDA")
linear.b <- lm(log(IMAT/(100-IMAT)) ~ log(YRIN) + log(AGEN) + log(HGA1) + LOI + ASIA + PRI + BED + PRAH, data = visit_one)
summary(linear.b)
print("Refining a bit")
# Taking out BED
linear.c <- lm(log(IMAT/(100-IMAT)) ~ log(YRIN) + log(AGEN) + LOI + ASIA + PRI, data = visit_one)
summary(linear.c)
?lm
print("Guesses from EDA")
linear.ab <- lm(log(IMAT/(100-IMAT)) ~ log(YRIN) + log(AGEN) + log(HGA1)*LOI*ASIA + PRI + BED + PRAH + , data = visit_one)
print("Guesses from EDA")
linear.ab <- lm(log(IMAT/(100-IMAT)) ~ log(YRIN)*log(AGEN) + log(HGA1) + LOI*ASIA + PRI + BED*PRAH + , data = visit_one)
print("Guesses from EDA")
linear.ab <- lm(log(IMAT/(100-IMAT)) ~ log(YRIN)*log(AGEN) + log(HGA1) + LOI*ASIA + PRI + BED*PRAH, data = visit_one)
summary(linear.ab)
print("Guesses from EDA")
linear.ab <- lm(log(IMAT/(100-IMAT)) ~ log(YRIN)*log(AGEN)*log(HGA1) + LOI*ASIA + PRI + BED*PRAH, data = visit_one)
summary(linear.ab)
print("Guesses from EDA")
linear.ab <- lm(log(IMAT/(100-IMAT)) ~ log(YRIN)*log(AGEN)*log(HGA1)*LOI*ASIA*PRI*BED*PRAH, data = visit_one)
summary(linear.ab)
install.packages(c("FactoMineR", "factoextra"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(plotly)
library(readxl)
library(rdist)
library(forcats)
library(car)
library(ggthemes)
library(FactoMineR)
library(factoextra)
?CA
View(linear.c)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(plotly)
library(readxl)
library(rdist)
library(forcats)
library(car)
library(ggthemes)
library(FactoMineR)
library(factoextra)
library(rpart)
library(rattle)
library(e1071)
cart_preds <- predict.rpart(pri.cart, newdata = class.test)
library(rpart)
cart_preds <- predict.rpart(pri.cart, newdata = class.test)
cart_preds <- predict(object = pri.cart, newdata = class.test)
# Use LOOCV (leave-one-out-cross-validation)
# make complexity parameter smaller (cp), maybe 0.001, and try again, then prune
# www.statmethods.net/advstats/cart.html
# Try a random forest as well
# Check dr. Sun's webpage for other tree plot methods
pri.cart <- rpart(PRI ~ ., data = class.train, method = "class", control = rpart.control(xval = nrow(class.train), cp = 0.0000001))
# Set up data to make sure that all points have a response classification
class_data <- visit_one %>% dplyr::filter(PRI == 'Y' | PRI == 'N')
# Randomly split to ~80% training, ~20% test
train_samp <- sample(nrow(class_data), size = round(0.8*nrow(class_data)), replace = FALSE)
class.train <- class_data[train_samp,]
class.test <- class_data[-train_samp,]
# Use LOOCV (leave-one-out-cross-validation)
# make complexity parameter smaller (cp), maybe 0.001, and try again, then prune
# www.statmethods.net/advstats/cart.html
# Try a random forest as well
# Check dr. Sun's webpage for other tree plot methods
pri.cart <- rpart(PRI ~ ., data = class.train, method = "class", control = rpart.control(xval = nrow(class.train), cp = 0.0000001))
printcp(pri.cart)
plotcp(pri.cart)
print(pri.cart)
summary(pri.cart)
fancyRpartPlot(pri.cart,
main = "PRI Classification Tree",
caption="Full tree, no trimming/pruning",
palette="RdBu")
cart_preds <- predict(object = pri.cart, newdata = class.test)
# Use LOOCV (leave-one-out-cross-validation)
# make complexity parameter smaller (cp), maybe 0.001, and try again, then prune
# www.statmethods.net/advstats/cart.html
# Try a random forest as well
# Check dr. Sun's webpage for other tree plot methods
pri.cart <- rpart(PRI ~ ., data = class.train, method = "class", control = rpart.control(xval = nrow(class.train), cp = 0.0000001))
printcp(pri.cart)
plotcp(pri.cart)
print(pri.cart)
summary(pri.cart)
fancyRpartPlot(pri.cart,
main = "PRI Classification Tree",
caption="Full tree, no trimming/pruning",
palette="RdBu")
cart_preds <- predict(object = pri.cart, newdata = class.test)
# Use LOOCV (leave-one-out-cross-validation)
# make complexity parameter smaller (cp), maybe 0.001, and try again, then prune
# www.statmethods.net/advstats/cart.html
# Try a random forest as well
# Check dr. Sun's webpage for other tree plot methods
pri.cart <- rpart(PRI ~ ., data = class.train, method = "class", control = rpart.control(xval = nrow(class.train)))
printcp(pri.cart)
plotcp(pri.cart)
print(pri.cart)
summary(pri.cart)
fancyRpartPlot(pri.cart,
main = "PRI Classification Tree",
caption="Full tree, no trimming/pruning",
palette="RdBu")
cart_preds <- predict(object = pri.cart, newdata = class.test)
install.packages("ggparty")
library(ggparty)
installed.packages("randomForest")
installed.packages("blarlksdflw")
install.packages("randomForest")
# Use LOOCV (leave-one-out-cross-validation)
# make complexity parameter smaller (cp), maybe 0.001, and try again, then prune
# www.statmethods.net/advstats/cart.html
# Try a random forest as well
# Check dr. Sun's webpage for other tree plot methods
pri.cart <- rpart(PRI ~ ., data = class.train, method = "class", control = rpart.control(xval = nrow(class.train)))
printcp(pri.cart)
plotcp(pri.cart)
print(pri.cart)
summary(pri.cart)
fancyRpartPlot(pri.cart,
main = "PRI Classification Tree",
caption="Full tree, no trimming/pruning",
palette="RdBu")
cart_preds <- predict(object = pri.cart, newdata = class.test)
plot.tree <- fancyRpartPlot(pri.cart,
main = "PRI Classification Tree",
caption="Full tree, no trimming/pruning",
palette="RdBu")
ggsave("tree_plot", plot.tree)
# Use LOOCV (leave-one-out-cross-validation)
# make complexity parameter smaller (cp), maybe 0.001, and try again, then prune
# www.statmethods.net/advstats/cart.html
# Try a random forest as well
# Check dr. Sun's webpage for other tree plot methods
pri.cart <- rpart(PRI ~ ., data = class.train, method = "class", control = rpart.control(xval = nrow(class.train)))
printcp(pri.cart)
plotcp(pri.cart)
print(pri.cart)
summary(pri.cart)
fancyRpartPlot(pri.cart,
main = "PRI Classification Tree",
caption="Full tree, no trimming/pruning",
palette="RdBu")
# cart_preds <- predict(object = pri.cart, newdata = class.test)
savePlotToFile("tree_plot", dev.num=dev.cur())
savePlotToFile("tree_plot", dev.num=dev.cur())
fancyRpartPlot(pri.cart,
main = "PRI Classification Tree",
caption="Full tree, no trimming/pruning",
palette="RdBu")
# cart_preds <- predict(object = pri.cart, newdata = class.test)
savePlotToFile("tree_plot", dev.num=dev.cur())
# Use LOOCV (leave-one-out-cross-validation)
# make complexity parameter smaller (cp), maybe 0.001, and try again, then prune
# www.statmethods.net/advstats/cart.html
# Try a random forest as well
# Check dr. Sun's webpage for other tree plot methods
pri.cart <- rpart(PRI ~ ., data = class.train, method = "class", control = rpart.control(xval = nrow(class.train)))
printcp(pri.cart)
plotcp(pri.cart)
print(pri.cart)
summary(pri.cart)
fancyRpartPlot(pri.cart,
main = "PRI Classification Tree",
caption="Full tree, no trimming/pruning",
palette="RdBu")
# cart_preds <- predict(object = pri.cart, newdata = class.test)
# Use LOOCV (leave-one-out-cross-validation)
# make complexity parameter smaller (cp), maybe 0.001, and try again, then prune
# www.statmethods.net/advstats/cart.html
# Try a random forest as well
# Check dr. Sun's webpage for other tree plot methods
pri.cart <- rpart(PRI ~ ., data = class.train, method = "class", control = rpart.control(xval = nrow(class.train)))
printcp(pri.cart)
plotcp(pri.cart)
print(pri.cart)
summary(pri.cart)
fancyRpartPlot(pri.cart,
main = "PRI Classification Tree",
caption="Full tree, no trimming/pruning",
palette="RdBu")
# cart_preds <- predict(object = pri.cart, newdata = class.test)
# Try binning continuous variables using CART.
# Use 'cex' to pick size of things, use ggplot for plotting of analysis
# Try plotting first 3 dimensions
# Set a diff color for each variable
# After plotting and understanding, remove variables that don't seem to have a relationship so that plot looks cleaner
mca_dat <- categoricals %>% select(-IMAT)
cats = apply(mca_dat, 2, function(x) nlevels(as.factor(x)))
visit_one.ca <- MCA(X = mca_dat, graph = FALSE)
mca_eig <- as.data.frame(visit_one.ca$eig)
# data frames for ggplot
mca1_vars_df = data.frame(visit_one.ca$var$coord, Variable = rep(names(cats),
cats))
mca1_obs_df = data.frame(visit_one.ca$ind$coord)
scree <- mca_eig %>% ggplot(aes(x = 1:nrow(mca_eig), y = `percentage of variance`)) +
geom_point() +
geom_line() +
g.theme
scree
# plot of variable categories
mca.plot <- ggplot(data = mca1_vars_df, aes(x = Dim.1, y = Dim.2, label = rownames(mca1_vars_df))) +
geom_hline(yintercept = 0, colour = "gray70") +
geom_vline(xintercept = 0, colour = "gray70") +
# geom_point(colour = "gray50", alpha = 0.7) +
geom_density2d(colour = "gray80") +
geom_text(data = mca1_vars_df, aes(x = Dim.1, y = Dim.2, label = rownames(mca1_vars_df), colour = Variable), size = 2.5) +
ggtitle("MCA plot of variables using R package FactoMineR") + scale_colour_discrete(name = "Variable") +
g.theme
mca.plot
options(repr.plot.width =20, repr.plot.height =20)
# ggsave("mca_plot.png", plot = mca.plot, width = 30, height = 30)
ggsave("mca_plot.png", plot = mca.plot, width = 30, height = 30)
dim(mca_dat)
?MCA
pri.cart1 <- rpart(PRI ~ ., data = class_data, method = "class", control = rpart.control(xval = nrow(class_data)))
fancyRpartPlot(pri.cart1,
main = "PRI Classification Tree",
caption="Full tree, no trimming/pruning",
palette="RdBu")
names(continuous)
continuous <- visit_one %>% dplyr::select(where(is.numeric))
names(continuous)
# Make histograms for numerical data
for (i in colnames(continuous)) {
p <- visit_one %>% ggplot(aes_string(x = i)) +
geom_histogram(bins = 30) +
labs(x = i) +
g.theme
print(p)
}
